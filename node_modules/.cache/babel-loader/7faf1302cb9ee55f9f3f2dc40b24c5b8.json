{"ast":null,"code":"const initialState = {\n  posts: [],\n  error: \"\",\n  register: []\n};\n\nconst Reducers = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log(666666666, action.type);\n  console.log(666611111, action.payload);\n\n  switch (action.type) {\n    case \"GET_POST\":\n      return { ...state,\n        posts: action.payload\n      };\n\n    case \"ADD_POST\":\n      return { ...state,\n        posts: state.posts.concat(action.payload)\n      };\n\n    case \"DELETE_POST\":\n      const deletedPost = state.posts.filter(post => {\n        if (post.id !== action.payload) {\n          return post;\n        }\n      });\n      return { ...state,\n        posts: deletedPost\n      };\n\n    case \"UPDATE_POSTS\":\n      const post = state.posts.find(post => post.id === action.payload.id);\n      post.name = action.payload.name;\n      const post2 = state.posts.map(post3 => {\n        if (post3.id === action.payload.id) {\n          return post;\n        } else {\n          return post3;\n        }\n      });\n      return { ...state,\n        posts: post2\n      };\n\n    case \"GET_ERROR\":\n      return { ...state,\n        error: action.payload\n      };\n\n    case \"GET_FORM\":\n      return { ...state,\n        register: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = Reducers;\nexport default Reducers;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reducers\");","map":{"version":3,"sources":["C:/Reactjs/Crud/src/redux/reducers/reducers.js"],"names":["initialState","posts","error","register","Reducers","state","action","console","log","type","payload","concat","deletedPost","filter","post","id","find","name","post2","map","post3"],"mappings":"AACA,MAAMA,YAAY,GAAC;AACfC,EAAAA,KAAK,EAAC,EADS;AAEfC,EAAAA,KAAK,EAAC,EAFS;AAGfC,EAAAA,QAAQ,EAAC;AAHM,CAAnB;;AAKA,MAAMC,QAAQ,GAAG,YAAiC;AAAA,MAAhCC,KAAgC,uEAAxBL,YAAwB;AAAA,MAAXM,MAAW;AAC9CC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAM,CAACG,IAA9B;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAM,CAACI,OAA9B;;AAEA,UAAQJ,MAAM,CAACG,IAAf;AACE,SAAK,UAAL;AACE,aAAO,EAAE,GAAGJ,KAAL;AAAYJ,QAAAA,KAAK,EAAEK,MAAM,CAACI;AAA1B,OAAP;;AAEF,SAAK,UAAL;AACE,aAAO,EAAE,GAAGL,KAAL;AAAYJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYU,MAAZ,CAAmBL,MAAM,CAACI,OAA1B;AAAnB,OAAP;;AAEF,SAAK,aAAL;AACE,YAAME,WAAW,GAAGP,KAAK,CAACJ,KAAN,CAAYY,MAAZ,CAAoBC,IAAD,IAAU;AAC/C,YAAIA,IAAI,CAACC,EAAL,KAAYT,MAAM,CAACI,OAAvB,EAAgC;AAC9B,iBAAOI,IAAP;AACD;AACF,OAJmB,CAApB;AAKA,aAAO,EAAE,GAAGT,KAAL;AAAYJ,QAAAA,KAAK,EAAEW;AAAnB,OAAP;;AAEF,SAAK,cAAL;AACE,YAAME,IAAI,GAAGT,KAAK,CAACJ,KAAN,CAAYe,IAAZ,CAAkBF,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYT,MAAM,CAACI,OAAP,CAAeK,EAAtD,CAAb;AACAD,MAAAA,IAAI,CAACG,IAAL,GAAYX,MAAM,CAACI,OAAP,CAAeO,IAA3B;AACA,YAAMC,KAAK,GAAGb,KAAK,CAACJ,KAAN,CAAYkB,GAAZ,CAAiBC,KAAD,IAAW;AACvC,YAAIA,KAAK,CAACL,EAAN,KAAaT,MAAM,CAACI,OAAP,CAAeK,EAAhC,EAAoC;AAClC,iBAAOD,IAAP;AACD,SAFD,MAEO;AACL,iBAAOM,KAAP;AACD;AACF,OANa,CAAd;AAOA,aAAO,EAAE,GAAGf,KAAL;AAAYJ,QAAAA,KAAK,EAAEiB;AAAnB,OAAP;;AAEF,SAAK,WAAL;AACE,aAAO,EAAE,GAAGb,KAAL;AAAYH,QAAAA,KAAK,EAAEI,MAAM,CAACI;AAA1B,OAAP;;AACF,SAAK,UAAL;AACE,aAAO,EAAE,GAAGL,KAAL;AAAYF,QAAAA,QAAQ,EAAEG,MAAM,CAACI;AAA7B,OAAP;;AACF;AACE,aAAOL,KAAP;AAhCJ;AAkCH,CAtCD;;KAAMD,Q;AAwCN,eAAeA,QAAf","sourcesContent":["\nconst initialState={\n    posts:[],\n    error:\"\",\n    register:[],\n}\nconst Reducers = (state = initialState,action) => {\n    console.log(666666666, action.type);\n    console.log(666611111, action.payload);\n\n    switch (action.type) {\n      case \"GET_POST\":\n        return { ...state, posts: action.payload };\n\n      case \"ADD_POST\":\n        return { ...state, posts: state.posts.concat(action.payload) };\n\n      case \"DELETE_POST\":\n        const deletedPost = state.posts.filter((post) => {\n          if (post.id !== action.payload) {\n            return post;\n          }\n        });\n        return { ...state, posts: deletedPost };\n\n      case \"UPDATE_POSTS\":\n        const post = state.posts.find((post) => post.id === action.payload.id);\n        post.name = action.payload.name;\n        const post2 = state.posts.map((post3) => {\n          if (post3.id === action.payload.id) {\n            return post;\n          } else {\n            return post3;\n          }\n        });\n        return { ...state, posts: post2 };\n        \n      case \"GET_ERROR\":\n        return { ...state, error: action.payload };\n      case \"GET_FORM\":\n        return { ...state, register: action.payload };\n      default:\n        return state;\n    }\n}\n\nexport default Reducers;"]},"metadata":{},"sourceType":"module"}